# {{ conf }}
# This file was automatically generated by l3overlayd.

log "{{ log }}" all;

{% if log_level == 'DEBUG' %}
debug protocols all;
{% endif %}

router id {{ mesh_tunnels[0].virtual_local }};

protocol device
{
}

protocol kernel
{
    export all;
}

protocol bfd
{
}

{% if interfaces|length > 0 %}
protocol direct
{
    # Static interfaces
{% for interface in interfaces %}
    interface "{{ interface.name }}";
{% endfor %}
}
{% endif %}

# Mesh tunnels
{% for mesh_tunnel in mesh_tunnels %}
protocol bgp '{{ mesh_tunnel.name }}'
{

    import all;
    export all;

    direct;
    next hop self;

    bfd on;
    ttl security on;

    local {{ mesh_tunnel.virtual_local }} as {{ asn }};
    neighbor {{ mesh_tunnel.virtual_remote }} as {{ asn }};

    description "{{ mesh_tunnel.node_local }} -> {{ mesh_tunnel.node_remote }}";

}

{% endfor %}

{% if interfaces|length > 0 %}
{% for interface in interfaces %}
{% if interfaces.outer_overlay_name is defined and interfaces.inner_overlay_name is defined %}
# Static overlay link
protocol bgp '{{ interface.name }}'
{

    import all;
    export all;

    direct;
    next hop self;

    bfd on;
    ttl security on;

{% if overlay == interface.outer_overlay_name %}
    local {{ interface.outer_address }} as {{ interface.outer_asn }};
    neighbor {{ interface.inner_address }} as {{ interface.inner_asn }};
    description "{{ interfaces.outer_overlay_name }} -> {{ interfaces.inner_overlay_name }}";
{% else %}
    local {{ interface.inner_address }} as {{ interface.inner_asn }};
    neighbor {{ interface.outer_address }} as {{ interface.outer_asn }};
    description "{{ interface.inner_overlay_name }} -> {{ interface.outer_overlay_name }}";
{% endif %}
}

{% endif %}
{% endfor %}
{% endif %}

{% if bgps|length > 0 %}
{% for bgp in bgps %}
# Static BGP protocol
protocol bgp '{{ bgp.name }}'
{

    direct;
    next hop self;

    bfd {{ bgp.bfd }};
    ttl security {{ bgp.ttl_security }};

    local {% if bgp.local %}{{ bgp.local }} {% endif %}as {{ bgp.local_asn }};
    neighbor {{ bgp.neighbor }} as {{ bgp.neighbor_asn }};

{% if bgp.description %}
    description "{{ bgp.description }}";
{% endif %}

    import filter {
{% if bgp.import_prefixes %}

        if net ~ [ {{ bgp.import_prefixes|join(', ') }} ] then
            reject;
{% endif %}

        if (24226, 900) ~ bgp_community then
            reject;

        accept;

    };

    export filter {

        bgp_community.add((24226, 900));
        accept;

    };

}

{% endfor %}
{% endif %}
