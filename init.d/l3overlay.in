#!/bin/sh
### BEGIN INIT INFO
# Provides:          l3overlay
# Required-Start:    $local_fs $network $remote_fs $syslog
# Required-Stop:     $local_fs $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: IPsec overlay network manager
# Description:       l3overlay is a tool used to build a MPLS-like VRF network
#                    between nodes/firewalls across the Internet. It uses a
#                    combination of network namespaces, gretap tunnels (with
#                    optional IPsec encapsulation for security) to create an
#                    "overlay" over the node's Internet connection.
### END INIT INFO

# Author: Callum Dickinson <callum.dickinson@catalyst.net.nz>

# l3overlay - IPsec overlay network manager
# __SERVICE_ETC_DIR__/init.d/l3overlay - System V-style init script

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH='/sbin:/usr/sbin:/bin:/usr/bin'

NAME='l3overlay'
DESC='IPsec overlay network manager'

FILE='__SERVICE_ETC_DIR__/init.d/l3overlay'
DEFAULT='__SERVICE_ETC_DIR__/default/l3overlay'

DAEMON_NAME='l3overlayd'
DAEMON='__SBIN_DIR__/l3overlayd'
DAEMON_ARGS=""
PID="__SERVICE_VAR_RUN_DIR__/$DAEMON_NAME.pid"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r "$DEFAULT" ] && . "$DEFAULT"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --background --quiet --pidfile $PID --startas $DAEMON \
		--name $DAEMON_NAME --test > /dev/null \
		|| return 1
	start-stop-daemon --start --background --quiet --pidfile $PID --startas $DAEMON \
		--name $DAEMON_NAME -- $DAEMON_ARGS --pid $PID \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PID --name $DAEMON_NAME
	return "$?"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	start-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $DAEMON_NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$DAEMON_NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$DAEMON_NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$DAEMON_NAME" && exit 0 || exit $?
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$DAEMON_NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$DAEMON_NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $FILE {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
